/* automatically generated by rust-bindgen */

pub type int8_t = ::ty::c_char;
pub type int16_t = ::ty::c_short;
pub type int32_t = ::ty::c_int;
pub type int64_t = ::ty::c_long;
pub type uint8_t = ::ty::c_uchar;
pub type uint16_t = ::ty::c_ushort;
pub type uint32_t = ::ty::c_uint;
pub type uint64_t = ::ty::c_ulong;
pub type int_least8_t = ::ty::c_char;
pub type int_least16_t = ::ty::c_short;
pub type int_least32_t = ::ty::c_int;
pub type int_least64_t = ::ty::c_long;
pub type uint_least8_t = ::ty::c_uchar;
pub type uint_least16_t = ::ty::c_ushort;
pub type uint_least32_t = ::ty::c_uint;
pub type uint_least64_t = ::ty::c_ulong;
pub type int_fast8_t = ::ty::c_char;
pub type int_fast16_t = ::ty::c_long;
pub type int_fast32_t = ::ty::c_long;
pub type int_fast64_t = ::ty::c_long;
pub type uint_fast8_t = ::ty::c_uchar;
pub type uint_fast16_t = ::ty::c_ulong;
pub type uint_fast32_t = ::ty::c_ulong;
pub type uint_fast64_t = ::ty::c_ulong;
pub type intptr_t = ::ty::c_long;
pub type uintptr_t = ::ty::c_ulong;
pub type intmax_t = ::ty::c_long;
pub type uintmax_t = ::ty::c_ulong;
pub type pin_t = uint16_t;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_PinMode {
    INPUT = 0,
    OUTPUT = 1,
    INPUT_PULLUP = 2,
    INPUT_PULLDOWN = 3,
    AF_OUTPUT_PUSHPULL = 4,
    AF_OUTPUT_DRAIN = 5,
    AN_INPUT = 6,
    AN_OUTPUT = 7,
    PIN_MODE_NONE = 255,
}
pub type PinMode = Enum_PinMode;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed1 {
    PF_NONE = 0,
    PF_DIO = 1,
    PF_TIMER = 2,
    PF_ADC = 3,
    PF_DAC = 4,
}
pub type PinFunction = Enum_Unnamed1;
pub enum Struct_STM32_Pin_Info { }
pub type STM32_Pin_Info = Struct_STM32_Pin_Info;
extern "C" {
    pub fn HAL_Validate_Pin_Function(pin: pin_t, pinFunction: PinFunction)
     -> PinFunction;
    pub fn HAL_Pin_Map() -> *mut STM32_Pin_Info;
    pub fn HAL_Pin_Mode(pin: pin_t, mode: PinMode);
    pub fn HAL_Get_Pin_Mode(pin: pin_t) -> PinMode;
    pub fn HAL_GPIO_Write(pin: pin_t, value: uint8_t);
    pub fn HAL_GPIO_Read(pin: pin_t) -> int32_t;
    pub fn HAL_Pulse_In(pin: pin_t, value: uint16_t) -> uint32_t;
}
