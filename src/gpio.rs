/* automatically generated by rust-bindgen */

pub const true_: ::ctypes::c_uint = 1;
pub const false_: ::ctypes::c_uint = 0;
pub const __bool_true_false_are_defined: ::ctypes::c_uint = 1;
pub const _STDINT_H: ::ctypes::c_uint = 1;
pub const _FEATURES_H: ::ctypes::c_uint = 1;
pub const _DEFAULT_SOURCE: ::ctypes::c_uint = 1;
pub const __USE_ISOC11: ::ctypes::c_uint = 1;
pub const __USE_ISOC99: ::ctypes::c_uint = 1;
pub const __USE_ISOC95: ::ctypes::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::ctypes::c_uint = 1;
pub const _POSIX_SOURCE: ::ctypes::c_uint = 1;
pub const _POSIX_C_SOURCE: ::ctypes::c_uint = 200809;
pub const __USE_POSIX: ::ctypes::c_uint = 1;
pub const __USE_POSIX2: ::ctypes::c_uint = 1;
pub const __USE_POSIX199309: ::ctypes::c_uint = 1;
pub const __USE_POSIX199506: ::ctypes::c_uint = 1;
pub const __USE_XOPEN2K: ::ctypes::c_uint = 1;
pub const __USE_XOPEN2K8: ::ctypes::c_uint = 1;
pub const _ATFILE_SOURCE: ::ctypes::c_uint = 1;
pub const __USE_MISC: ::ctypes::c_uint = 1;
pub const __USE_ATFILE: ::ctypes::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::ctypes::c_uint = 0;
pub const _STDC_PREDEF_H: ::ctypes::c_uint = 1;
pub const __STDC_IEC_559__: ::ctypes::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::ctypes::c_uint = 1;
pub const __STDC_ISO_10646__: ::ctypes::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::ctypes::c_uint = 1;
pub const __GNU_LIBRARY__: ::ctypes::c_uint = 6;
pub const __GLIBC__: ::ctypes::c_uint = 2;
pub const __GLIBC_MINOR__: ::ctypes::c_uint = 25;
pub const _SYS_CDEFS_H: ::ctypes::c_uint = 1;
pub const __glibc_c99_flexarr_available: ::ctypes::c_uint = 1;
pub const __WORDSIZE: ::ctypes::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::ctypes::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::ctypes::c_uint = 64;
pub const __GLIBC_USE_LIB_EXT2: ::ctypes::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: ::ctypes::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: ::ctypes::c_uint = 0;
pub const _BITS_TYPES_H: ::ctypes::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::ctypes::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::ctypes::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::ctypes::c_uint = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: ::ctypes::c_uint = 1;
pub const __FD_SETSIZE: ::ctypes::c_uint = 1024;
pub const _BITS_WCHAR_H: ::ctypes::c_uint = 1;
pub const INT8_MIN: ::ctypes::c_int = -128;
pub const INT16_MIN: ::ctypes::c_int = -32768;
pub const INT32_MIN: ::ctypes::c_int = -2147483648;
pub const INT8_MAX: ::ctypes::c_uint = 127;
pub const INT16_MAX: ::ctypes::c_uint = 32767;
pub const INT32_MAX: ::ctypes::c_uint = 2147483647;
pub const UINT8_MAX: ::ctypes::c_uint = 255;
pub const UINT16_MAX: ::ctypes::c_uint = 65535;
pub const UINT32_MAX: ::ctypes::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::ctypes::c_int = -128;
pub const INT_LEAST16_MIN: ::ctypes::c_int = -32768;
pub const INT_LEAST32_MIN: ::ctypes::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::ctypes::c_uint = 127;
pub const INT_LEAST16_MAX: ::ctypes::c_uint = 32767;
pub const INT_LEAST32_MAX: ::ctypes::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::ctypes::c_uint = 255;
pub const UINT_LEAST16_MAX: ::ctypes::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::ctypes::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::ctypes::c_int = -128;
pub const INT_FAST16_MIN: ::ctypes::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::ctypes::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::ctypes::c_uint = 127;
pub const INT_FAST16_MAX: ::ctypes::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::ctypes::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::ctypes::c_uint = 255;
pub const UINT_FAST16_MAX: ::ctypes::c_int = -1;
pub const UINT_FAST32_MAX: ::ctypes::c_int = -1;
pub const INTPTR_MIN: ::ctypes::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::ctypes::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::ctypes::c_int = -1;
pub const PTRDIFF_MIN: ::ctypes::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::ctypes::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::ctypes::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::ctypes::c_uint = 2147483647;
pub const SIZE_MAX: ::ctypes::c_int = -1;
pub const WINT_MIN: ::ctypes::c_uint = 0;
pub const WINT_MAX: ::ctypes::c_uint = 4294967295;
pub const TOTAL_PINS: ::ctypes::c_uint = 24;
pub const TOTAL_DAC_PINS: ::ctypes::c_uint = 0;
pub const TOTAL_ANALOG_PINS: ::ctypes::c_uint = 8;
pub const FIRST_ANALOG_PIN: ::ctypes::c_uint = 10;
pub const D0: ::ctypes::c_uint = 0;
pub const D1: ::ctypes::c_uint = 1;
pub const D2: ::ctypes::c_uint = 2;
pub const D3: ::ctypes::c_uint = 3;
pub const D4: ::ctypes::c_uint = 4;
pub const D5: ::ctypes::c_uint = 5;
pub const D6: ::ctypes::c_uint = 6;
pub const D7: ::ctypes::c_uint = 7;
pub const A0: ::ctypes::c_uint = 10;
pub const A1: ::ctypes::c_uint = 11;
pub const A2: ::ctypes::c_uint = 12;
pub const A3: ::ctypes::c_uint = 13;
pub const A4: ::ctypes::c_uint = 14;
pub const A5: ::ctypes::c_uint = 15;
pub const A6: ::ctypes::c_uint = 16;
pub const A7: ::ctypes::c_uint = 17;
pub const RX: ::ctypes::c_uint = 18;
pub const TX: ::ctypes::c_uint = 19;
pub const BTN: ::ctypes::c_uint = 20;
pub const WKP: ::ctypes::c_uint = 17;
pub const TIMER2_CH1: ::ctypes::c_uint = 10;
pub const TIMER2_CH2: ::ctypes::c_uint = 11;
pub const TIMER2_CH3: ::ctypes::c_uint = 18;
pub const TIMER2_CH4: ::ctypes::c_uint = 19;
pub const TIMER3_CH1: ::ctypes::c_uint = 14;
pub const TIMER3_CH2: ::ctypes::c_uint = 15;
pub const TIMER3_CH3: ::ctypes::c_uint = 16;
pub const TIMER3_CH4: ::ctypes::c_uint = 17;
pub const TIMER4_CH1: ::ctypes::c_uint = 1;
pub const TIMER4_CH2: ::ctypes::c_uint = 0;
pub const SS: ::ctypes::c_uint = 12;
pub const SCK: ::ctypes::c_uint = 13;
pub const MISO: ::ctypes::c_uint = 14;
pub const MOSI: ::ctypes::c_uint = 15;
pub const SDA: ::ctypes::c_uint = 0;
pub const SCL: ::ctypes::c_uint = 1;
pub const DAC1: ::ctypes::c_uint = 16;
pub const DAC2: ::ctypes::c_uint = 13;
pub const RGBR: ::ctypes::c_uint = 21;
pub const RGBG: ::ctypes::c_uint = 22;
pub const RGBB: ::ctypes::c_uint = 23;
pub const TIM_PWM_FREQ: ::ctypes::c_uint = 500;
pub const SERVO_TIM_PWM_FREQ: ::ctypes::c_uint = 50;
pub const LSBFIRST: ::ctypes::c_uint = 0;
pub const MSBFIRST: ::ctypes::c_uint = 1;
pub type __u_char = ::ctypes::c_uchar;
pub type __u_short = ::ctypes::c_ushort;
pub type __u_int = ::ctypes::c_uint;
pub type __u_long = ::ctypes::c_ulong;
pub type __int8_t = ::ctypes::c_schar;
pub type __uint8_t = ::ctypes::c_uchar;
pub type __int16_t = ::ctypes::c_short;
pub type __uint16_t = ::ctypes::c_ushort;
pub type __int32_t = ::ctypes::c_int;
pub type __uint32_t = ::ctypes::c_uint;
pub type __int64_t = ::ctypes::c_long;
pub type __uint64_t = ::ctypes::c_ulong;
pub type __quad_t = ::ctypes::c_long;
pub type __u_quad_t = ::ctypes::c_ulong;
pub type __intmax_t = ::ctypes::c_long;
pub type __uintmax_t = ::ctypes::c_ulong;
pub type __dev_t = ::ctypes::c_ulong;
pub type __uid_t = ::ctypes::c_uint;
pub type __gid_t = ::ctypes::c_uint;
pub type __ino_t = ::ctypes::c_ulong;
pub type __ino64_t = ::ctypes::c_ulong;
pub type __mode_t = ::ctypes::c_uint;
pub type __nlink_t = ::ctypes::c_ulong;
pub type __off_t = ::ctypes::c_long;
pub type __off64_t = ::ctypes::c_long;
pub type __pid_t = ::ctypes::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __fsid_t {
    pub __val: [::ctypes::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(::core::mem::size_of::<__fsid_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __fsid_t ) ));
    assert_eq! (::core::mem::align_of::<__fsid_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __fsid_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __fsid_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __fsid_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __fsid_t {
    fn clone(&self) -> Self { *self }
}
pub type __clock_t = ::ctypes::c_long;
pub type __rlim_t = ::ctypes::c_ulong;
pub type __rlim64_t = ::ctypes::c_ulong;
pub type __id_t = ::ctypes::c_uint;
pub type __time_t = ::ctypes::c_long;
pub type __useconds_t = ::ctypes::c_uint;
pub type __suseconds_t = ::ctypes::c_long;
pub type __daddr_t = ::ctypes::c_int;
pub type __key_t = ::ctypes::c_int;
pub type __clockid_t = ::ctypes::c_int;
pub type __timer_t = *mut ::ctypes::c_void;
pub type __blksize_t = ::ctypes::c_long;
pub type __blkcnt_t = ::ctypes::c_long;
pub type __blkcnt64_t = ::ctypes::c_long;
pub type __fsblkcnt_t = ::ctypes::c_ulong;
pub type __fsblkcnt64_t = ::ctypes::c_ulong;
pub type __fsfilcnt_t = ::ctypes::c_ulong;
pub type __fsfilcnt64_t = ::ctypes::c_ulong;
pub type __fsword_t = ::ctypes::c_long;
pub type __ssize_t = ::ctypes::c_long;
pub type __syscall_slong_t = ::ctypes::c_long;
pub type __syscall_ulong_t = ::ctypes::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::ctypes::c_char;
pub type __intptr_t = ::ctypes::c_long;
pub type __socklen_t = ::ctypes::c_uint;
pub type int_least8_t = ::ctypes::c_schar;
pub type int_least16_t = ::ctypes::c_short;
pub type int_least32_t = ::ctypes::c_int;
pub type int_least64_t = ::ctypes::c_long;
pub type uint_least8_t = ::ctypes::c_uchar;
pub type uint_least16_t = ::ctypes::c_ushort;
pub type uint_least32_t = ::ctypes::c_uint;
pub type uint_least64_t = ::ctypes::c_ulong;
pub type int_fast8_t = ::ctypes::c_schar;
pub type int_fast16_t = ::ctypes::c_long;
pub type int_fast32_t = ::ctypes::c_long;
pub type int_fast64_t = ::ctypes::c_long;
pub type uint_fast8_t = ::ctypes::c_uchar;
pub type uint_fast16_t = ::ctypes::c_ulong;
pub type uint_fast32_t = ::ctypes::c_ulong;
pub type uint_fast64_t = ::ctypes::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type pin_t = u16;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PinMode {
    INPUT = 0,
    OUTPUT = 1,
    INPUT_PULLUP = 2,
    INPUT_PULLDOWN = 3,
    AF_OUTPUT_PUSHPULL = 4,
    AF_OUTPUT_DRAIN = 5,
    AN_INPUT = 6,
    AN_OUTPUT = 7,
    PIN_MODE_NONE = 255,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum PinFunction {
    PF_NONE = 0,
    PF_DIO = 1,
    PF_TIMER = 2,
    PF_ADC = 3,
    PF_DAC = 4,
}
extern "C" {
    pub fn HAL_Validate_Pin_Function(pin: pin_t, pinFunction: PinFunction)
     -> PinFunction;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct STM32_Pin_Info {
    _unused: [u8; 0],
}
extern "C" {
    pub fn HAL_Pin_Map() -> *mut STM32_Pin_Info;
}
extern "C" {
    pub fn HAL_Pin_Mode(pin: pin_t, mode: PinMode);
}
extern "C" {
    pub fn HAL_Get_Pin_Mode(pin: pin_t) -> PinMode;
}
extern "C" {
    pub fn HAL_GPIO_Write(pin: pin_t, value: u8);
}
extern "C" {
    pub fn HAL_GPIO_Read(pin: pin_t) -> i32;
}
extern "C" {
    pub fn HAL_Pulse_In(pin: pin_t, value: u16) -> u32;
}
