/* automatically generated by rust-bindgen */

pub const _STDINT_H: ::ctypes::c_uint = 1;
pub const _FEATURES_H: ::ctypes::c_uint = 1;
pub const _DEFAULT_SOURCE: ::ctypes::c_uint = 1;
pub const __USE_ISOC11: ::ctypes::c_uint = 1;
pub const __USE_ISOC99: ::ctypes::c_uint = 1;
pub const __USE_ISOC95: ::ctypes::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::ctypes::c_uint = 1;
pub const _POSIX_SOURCE: ::ctypes::c_uint = 1;
pub const _POSIX_C_SOURCE: ::ctypes::c_uint = 200809;
pub const __USE_POSIX: ::ctypes::c_uint = 1;
pub const __USE_POSIX2: ::ctypes::c_uint = 1;
pub const __USE_POSIX199309: ::ctypes::c_uint = 1;
pub const __USE_POSIX199506: ::ctypes::c_uint = 1;
pub const __USE_XOPEN2K: ::ctypes::c_uint = 1;
pub const __USE_XOPEN2K8: ::ctypes::c_uint = 1;
pub const _ATFILE_SOURCE: ::ctypes::c_uint = 1;
pub const __USE_MISC: ::ctypes::c_uint = 1;
pub const __USE_ATFILE: ::ctypes::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::ctypes::c_uint = 0;
pub const _STDC_PREDEF_H: ::ctypes::c_uint = 1;
pub const __STDC_IEC_559__: ::ctypes::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::ctypes::c_uint = 1;
pub const __STDC_ISO_10646__: ::ctypes::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::ctypes::c_uint = 1;
pub const __GNU_LIBRARY__: ::ctypes::c_uint = 6;
pub const __GLIBC__: ::ctypes::c_uint = 2;
pub const __GLIBC_MINOR__: ::ctypes::c_uint = 25;
pub const _SYS_CDEFS_H: ::ctypes::c_uint = 1;
pub const __glibc_c99_flexarr_available: ::ctypes::c_uint = 1;
pub const __WORDSIZE: ::ctypes::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::ctypes::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::ctypes::c_uint = 64;
pub const __GLIBC_USE_LIB_EXT2: ::ctypes::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: ::ctypes::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: ::ctypes::c_uint = 0;
pub const _BITS_TYPES_H: ::ctypes::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::ctypes::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::ctypes::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::ctypes::c_uint = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: ::ctypes::c_uint = 1;
pub const __FD_SETSIZE: ::ctypes::c_uint = 1024;
pub const _BITS_WCHAR_H: ::ctypes::c_uint = 1;
pub const INT8_MIN: ::ctypes::c_int = -128;
pub const INT16_MIN: ::ctypes::c_int = -32768;
pub const INT32_MIN: ::ctypes::c_int = -2147483648;
pub const INT8_MAX: ::ctypes::c_uint = 127;
pub const INT16_MAX: ::ctypes::c_uint = 32767;
pub const INT32_MAX: ::ctypes::c_uint = 2147483647;
pub const UINT8_MAX: ::ctypes::c_uint = 255;
pub const UINT16_MAX: ::ctypes::c_uint = 65535;
pub const UINT32_MAX: ::ctypes::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::ctypes::c_int = -128;
pub const INT_LEAST16_MIN: ::ctypes::c_int = -32768;
pub const INT_LEAST32_MIN: ::ctypes::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::ctypes::c_uint = 127;
pub const INT_LEAST16_MAX: ::ctypes::c_uint = 32767;
pub const INT_LEAST32_MAX: ::ctypes::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::ctypes::c_uint = 255;
pub const UINT_LEAST16_MAX: ::ctypes::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::ctypes::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::ctypes::c_int = -128;
pub const INT_FAST16_MIN: ::ctypes::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::ctypes::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::ctypes::c_uint = 127;
pub const INT_FAST16_MAX: ::ctypes::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::ctypes::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::ctypes::c_uint = 255;
pub const UINT_FAST16_MAX: ::ctypes::c_int = -1;
pub const UINT_FAST32_MAX: ::ctypes::c_int = -1;
pub const INTPTR_MIN: ::ctypes::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::ctypes::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::ctypes::c_int = -1;
pub const PTRDIFF_MIN: ::ctypes::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::ctypes::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::ctypes::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::ctypes::c_uint = 2147483647;
pub const SIZE_MAX: ::ctypes::c_int = -1;
pub const WINT_MIN: ::ctypes::c_uint = 0;
pub const WINT_MAX: ::ctypes::c_uint = 4294967295;
pub const true_: ::ctypes::c_uint = 1;
pub const false_: ::ctypes::c_uint = 0;
pub const __bool_true_false_are_defined: ::ctypes::c_uint = 1;
pub type __u_char = ::ctypes::c_uchar;
pub type __u_short = ::ctypes::c_ushort;
pub type __u_int = ::ctypes::c_uint;
pub type __u_long = ::ctypes::c_ulong;
pub type __int8_t = ::ctypes::c_schar;
pub type __uint8_t = ::ctypes::c_uchar;
pub type __int16_t = ::ctypes::c_short;
pub type __uint16_t = ::ctypes::c_ushort;
pub type __int32_t = ::ctypes::c_int;
pub type __uint32_t = ::ctypes::c_uint;
pub type __int64_t = ::ctypes::c_long;
pub type __uint64_t = ::ctypes::c_ulong;
pub type __quad_t = ::ctypes::c_long;
pub type __u_quad_t = ::ctypes::c_ulong;
pub type __intmax_t = ::ctypes::c_long;
pub type __uintmax_t = ::ctypes::c_ulong;
pub type __dev_t = ::ctypes::c_ulong;
pub type __uid_t = ::ctypes::c_uint;
pub type __gid_t = ::ctypes::c_uint;
pub type __ino_t = ::ctypes::c_ulong;
pub type __ino64_t = ::ctypes::c_ulong;
pub type __mode_t = ::ctypes::c_uint;
pub type __nlink_t = ::ctypes::c_ulong;
pub type __off_t = ::ctypes::c_long;
pub type __off64_t = ::ctypes::c_long;
pub type __pid_t = ::ctypes::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __fsid_t {
    pub __val: [::ctypes::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(::core::mem::size_of::<__fsid_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __fsid_t ) ));
    assert_eq! (::core::mem::align_of::<__fsid_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __fsid_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __fsid_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __fsid_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __fsid_t {
    fn clone(&self) -> Self { *self }
}
pub type __clock_t = ::ctypes::c_long;
pub type __rlim_t = ::ctypes::c_ulong;
pub type __rlim64_t = ::ctypes::c_ulong;
pub type __id_t = ::ctypes::c_uint;
pub type __time_t = ::ctypes::c_long;
pub type __useconds_t = ::ctypes::c_uint;
pub type __suseconds_t = ::ctypes::c_long;
pub type __daddr_t = ::ctypes::c_int;
pub type __key_t = ::ctypes::c_int;
pub type __clockid_t = ::ctypes::c_int;
pub type __timer_t = *mut ::ctypes::c_void;
pub type __blksize_t = ::ctypes::c_long;
pub type __blkcnt_t = ::ctypes::c_long;
pub type __blkcnt64_t = ::ctypes::c_long;
pub type __fsblkcnt_t = ::ctypes::c_ulong;
pub type __fsblkcnt64_t = ::ctypes::c_ulong;
pub type __fsfilcnt_t = ::ctypes::c_ulong;
pub type __fsfilcnt64_t = ::ctypes::c_ulong;
pub type __fsword_t = ::ctypes::c_long;
pub type __ssize_t = ::ctypes::c_long;
pub type __syscall_slong_t = ::ctypes::c_long;
pub type __syscall_ulong_t = ::ctypes::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::ctypes::c_char;
pub type __intptr_t = ::ctypes::c_long;
pub type __socklen_t = ::ctypes::c_uint;
pub type int_least8_t = ::ctypes::c_schar;
pub type int_least16_t = ::ctypes::c_short;
pub type int_least32_t = ::ctypes::c_int;
pub type int_least64_t = ::ctypes::c_long;
pub type uint_least8_t = ::ctypes::c_uchar;
pub type uint_least16_t = ::ctypes::c_ushort;
pub type uint_least32_t = ::ctypes::c_uint;
pub type uint_least64_t = ::ctypes::c_ulong;
pub type int_fast8_t = ::ctypes::c_schar;
pub type int_fast16_t = ::ctypes::c_long;
pub type int_fast32_t = ::ctypes::c_long;
pub type int_fast64_t = ::ctypes::c_long;
pub type uint_fast8_t = ::ctypes::c_uchar;
pub type uint_fast16_t = ::ctypes::c_ulong;
pub type uint_fast32_t = ::ctypes::c_ulong;
pub type uint_fast64_t = ::ctypes::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
extern "C" {
    pub fn SPARK_USB_Setup();
}
extern "C" {
    pub fn Get_SerialNum();
}
extern "C" {
    /**
 * Initialize or deinitialize USB serial
 * @param baudRate  The data rate of the connection. If 0, the connection is
 * uninitialized.
 */
    pub fn USB_USART_Init(baudRate: u32);
}
extern "C" {
    pub fn USB_USART_Baud_Rate() -> ::ctypes::c_uint;
}
extern "C" {
    pub fn USB_USART_LineCoding_BitRate_Handler(handler:
                                                    ::core::option::Option<unsafe extern "C" fn(bitRate:
                                                                                                    u32)>);
}
extern "C" {
    /**
 * Retrieves the number of bytes of data available.
 * @return
 */
    pub fn USB_USART_Available_Data() -> u8;
}
extern "C" {
    /**
 * Retrieves the number of bytes of data available in the TX buffer.
 * @return
 */
    pub fn USB_USART_Available_Data_For_Write() -> i32;
}
extern "C" {
    /**
 * Reads data from the input buffer.
 * @param peek  If the data should be peeked reather than fetched.
 * The default, `false` means fetch, where data is removed from the buffer.
 * When `true`, the data byte is left in the buffer.
 * @return
 */
    pub fn USB_USART_Receive_Data(peek: u8) -> i32;
}
extern "C" {
    /**
 * Sends data to the USB serial.
 * @param Data      The data to write.
 * @return
 */
    pub fn USB_USART_Send_Data(Data: u8);
}
extern "C" {
    /**
 * Flushes TX buffer
 * @return
 */
    pub fn USB_USART_Flush_Data();
}
extern "C" {
    pub fn HAL_USB_Init();
}
extern "C" {
    pub fn HAL_USB_Attach();
}
extern "C" {
    pub fn HAL_USB_Detach();
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum HAL_USB_USART_Serial {
    HAL_USB_USART_SERIAL = 0,
    HAL_USB_USART_SERIAL1 = 1,
    HAL_USB_USART_SERIAL_COUNT = 2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HAL_USB_USART_Config {
    pub size: u16,
    pub rx_buffer: *mut u8,
    pub rx_buffer_size: u16,
    pub tx_buffer: *mut u8,
    pub tx_buffer_size: u16,
}
#[test]
fn bindgen_test_layout_HAL_USB_USART_Config() {
    assert_eq!(::core::mem::size_of::<HAL_USB_USART_Config>() , 40usize ,
               concat ! ( "Size of: " , stringify ! ( HAL_USB_USART_Config )
               ));
    assert_eq! (::core::mem::align_of::<HAL_USB_USART_Config>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( HAL_USB_USART_Config ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HAL_USB_USART_Config ) ) . size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( HAL_USB_USART_Config )
                , "::" , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HAL_USB_USART_Config ) ) . rx_buffer as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( HAL_USB_USART_Config )
                , "::" , stringify ! ( rx_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HAL_USB_USART_Config ) ) . rx_buffer_size
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( HAL_USB_USART_Config )
                , "::" , stringify ! ( rx_buffer_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HAL_USB_USART_Config ) ) . tx_buffer as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( HAL_USB_USART_Config )
                , "::" , stringify ! ( tx_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const HAL_USB_USART_Config ) ) . tx_buffer_size
                as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( HAL_USB_USART_Config )
                , "::" , stringify ! ( tx_buffer_size ) ));
}
impl Clone for HAL_USB_USART_Config {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn HAL_USB_USART_Init(serial: HAL_USB_USART_Serial,
                              config: *const HAL_USB_USART_Config);
}
extern "C" {
    pub fn HAL_USB_USART_Begin(serial: HAL_USB_USART_Serial, baud: u32,
                               reserved: *mut ::ctypes::c_void);
}
extern "C" {
    pub fn HAL_USB_USART_End(serial: HAL_USB_USART_Serial);
}
extern "C" {
    pub fn HAL_USB_USART_Baud_Rate(serial: HAL_USB_USART_Serial)
     -> ::ctypes::c_uint;
}
extern "C" {
    pub fn HAL_USB_USART_Available_Data(serial: HAL_USB_USART_Serial) -> i32;
}
extern "C" {
    pub fn HAL_USB_USART_Available_Data_For_Write(serial:
                                                      HAL_USB_USART_Serial)
     -> i32;
}
extern "C" {
    pub fn HAL_USB_USART_Receive_Data(serial: HAL_USB_USART_Serial, peek: u8)
     -> i32;
}
extern "C" {
    pub fn HAL_USB_USART_Send_Data(serial: HAL_USB_USART_Serial, data: u8)
     -> i32;
}
extern "C" {
    pub fn HAL_USB_USART_Flush_Data(serial: HAL_USB_USART_Serial);
}
extern "C" {
    pub fn HAL_USB_USART_Is_Enabled(serial: HAL_USB_USART_Serial) -> bool;
}
extern "C" {
    pub fn HAL_USB_USART_Is_Connected(serial: HAL_USB_USART_Serial) -> bool;
}
extern "C" {
    pub fn HAL_USB_USART_LineCoding_BitRate_Handler(handler:
                                                        ::core::option::Option<unsafe extern "C" fn(bitRate:
                                                                                                        u32)>,
                                                    reserved:
                                                        *mut ::ctypes::c_void)
     -> i32;
}
